<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="18" hostname="LAPTOP-UMGIKAS2" failures="4" tests="17" name="Surefire test" time="38.71" errors="0" timestamp="2025-08-25T14:47:36 IST">
  <testcase classname="api.CreateUserAPITest" name="testCreateUser" time="3.338"/>
  <testcase classname="api.CreateUserDataDrivenTest" name="createUserTest" time="0.886"/>
  <testcase classname="api.CreateUserDataDrivenTest" name="createUserTest" time="0.051">
    <failure type="java.lang.AssertionError" message="Invalid input provided: name/job is null, blank, or &amp;apos;null&amp;apos;.">
      <![CDATA[java.lang.AssertionError: Invalid input provided: name/job is null, blank, or 'null'.
at api.CreateUserDataDrivenTest.createUserTest(CreateUserDataDrivenTest.java:47)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
... Removed 31 stack frames]]>
    </failure>
  </testcase> <!-- createUserTest -->
  <testcase classname="api.CreateUserDataDrivenTest" name="createUserTest" time="0.091">
    <failure type="java.lang.AssertionError" message="Invalid input provided: name/job is null, blank, or &amp;apos;null&amp;apos;.">
      <![CDATA[java.lang.AssertionError: Invalid input provided: name/job is null, blank, or 'null'.
at api.CreateUserDataDrivenTest.createUserTest(CreateUserDataDrivenTest.java:47)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
... Removed 31 stack frames]]>
    </failure>
  </testcase> <!-- createUserTest -->
  <testcase classname="api.CreateUserDataDrivenTest" name="createUserTest" time="0.119">
    <failure type="java.lang.AssertionError" message="Invalid input provided: name/job is null, blank, or &amp;apos;null&amp;apos;.">
      <![CDATA[java.lang.AssertionError: Invalid input provided: name/job is null, blank, or 'null'.
at api.CreateUserDataDrivenTest.createUserTest(CreateUserDataDrivenTest.java:47)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
... Removed 31 stack frames]]>
    </failure>
  </testcase> <!-- createUserTest -->
  <testcase classname="api.DeleteUserAPITest" name="testDeleteUser" time="0.662"/>
  <testcase classname="api.GetUserAPITest" name="testGetUser" time="0.494"/>
  <testcase classname="api.NegativeLoginAPITest" name="testInvalidEndpoint" time="0.337"/>
  <testcase classname="api.NegativeLoginAPITest" name="testMissingEmailAndPassword" time="0.456"/>
  <testcase classname="api.NegativeLoginAPITest" name="testMissingPassword" time="0.485"/>
  <testcase classname="api.UpdateUserAPITest" name="testUpdateUser" time="0.449"/>
  <testcase classname="api.UserApiTest" name="verifyGetUser" time="0.329"/>
  <testcase classname="testcases.InvalidLoginTest" name="loginWithInvalidCredentials" time="1.104"/>
  <testcase classname="testcases.InvalidLoginTest" name="loginWithInvalidCredentials" time="0.496"/>
  <testcase classname="testcases.InvalidLoginTest" name="loginWithInvalidCredentials" time="1.23"/>
  <testcase classname="testcases.ValidateAPIAndUILoginTest" name="validateApiResponseAndUILoad" time="0.712"/>
  <testcase classname="testcases.ValidLoginTest" name="loginWithMultipleUsers" time="0.026">
    <failure type="org.testng.internal.reflect.MethodMatcherException" message="
[public void testcases.ValidLoginTest.loginWithMultipleUsers(java.lang.String,java.lang.String)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: loginWithMultipleUsers([java.lang.String arg0, java.lang.String arg1])
Arguments: [(java.lang.String) standard_user,(java.lang.String) secret_sauce,(java.lang.Integer) 1]">
      <![CDATA[org.testng.internal.reflect.MethodMatcherException: 
[public void testcases.ValidLoginTest.loginWithMultipleUsers(java.lang.String,java.lang.String)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: loginWithMultipleUsers([java.lang.String arg0, java.lang.String arg1])
Arguments: [(java.lang.String) standard_user,(java.lang.String) secret_sauce,(java.lang.Integer) 1]
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- loginWithMultipleUsers -->
  <testcase classname="base.BaseTest" name="@AfterSuite tearDownExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownExtent -->
  <testcase classname="base.BaseTest" name="@AfterSuite tearDownExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownExtent -->
  <testcase classname="base.BaseTest" name="@BeforeSuite setupExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupExtent -->
  <testcase classname="base.BaseTest" name="@BeforeSuite setupExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupExtent -->
  <testcase classname="base.BaseTest" name="@BeforeSuite setupExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupExtent -->
  <testcase classname="base.BaseTest" name="@BeforeSuite setupExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupExtent -->
  <testcase classname="base.BaseTest" name="@BeforeSuite setupExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupExtent -->
  <testcase classname="base.BaseTest" name="@BeforeSuite setupExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupExtent -->
  <testcase classname="base.BaseTest" name="@BeforeSuite setupExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupExtent -->
  <testcase classname="base.BaseTest" name="@BeforeSuite setupExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupExtent -->
  <testcase classname="base.BaseTest" name="@AfterSuite tearDownExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownExtent -->
  <testcase classname="base.BaseTest" name="@AfterSuite tearDownExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownExtent -->
  <testcase classname="base.BaseTest" name="@AfterSuite tearDownExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownExtent -->
  <testcase classname="base.BaseTest" name="@BeforeSuite setupExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupExtent -->
  <testcase classname="base.BaseTest" name="@AfterSuite tearDownExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownExtent -->
  <testcase classname="base.BaseTest" name="@AfterSuite tearDownExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownExtent -->
  <testcase classname="base.BaseTest" name="@AfterSuite tearDownExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownExtent -->
  <testcase classname="base.BaseTest" name="@AfterSuite tearDownExtent" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownExtent -->
</testsuite> <!-- Surefire test -->
